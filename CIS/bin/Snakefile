#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 21 15:43:06 2021

@author: cfos
"""
import os


report: "report/workflow.rst"


include: "rules/common.smk"


####
# TMP
####
#config["workflow"] = "routine"

if config['use_date']:
    TODAY = date.today().strftime("%Y-%m-%d")
else:
    TODAY = pathlib.PurePath(config['reads_dir']).name

########################
# Rule 'all' depends on workflow/module choice
########################
if config["workflow"] == "routine":

    include: "rules/routine.smk"

    rule final_qc:
        input:
            anno_files=expand(
                os.path.join(RESULT_DIR, "{sample}/variants/{sample}.annotated.tsv"),
                sample=MAIN_SAMPLES,
            ),
            coverage_plot=expand(
                os.path.join(
                    RESULT_DIR, "{sample}/coverage/{sample}.coverage_plots.pdf"
                ),
                sample=MAIN_SAMPLES,
            ),
            neg_reports=expand(
                os.path.join(RESULT_DIR, "{sample}.qc_results.csv"), sample=NEG_SAMPLES
            ),
            sample_reports=expand(
                os.path.join(RESULT_DIR, "{sample}.qc_results.csv"),
                sample=MAIN_SAMPLES,
            ),
            report=os.path.join(RESULT_DIR, TODAY + "_softwareVersions.txt"),
        output:
            temp_qc = temp(os.path.join(RESULT_DIR, TODAY + "_temp_QC.csv")),
            qc_file=report(
                os.path.join(RESULT_DIR, TODAY + "_QC.csv"),
                caption="report/final_qc.rst",
                category="Final QC",
            ),
        message:
            "Pipeline complete!"
        run:
            fa_files = [f for f in glob.glob(RESULT_DIR + "/**/*.consensus.fa", recursive=True) if (s in f for s in MAIN_SAMPLES+NEG_SAMPLES)]

            multifasta = os.path.join(
                RESULT_DIR, TODAY + ".consensus_genomes.fasta"
            )
            if os.path.exists(multifasta):
                os.remove(multifasta)

            for fa in fa_files:
                os.system("cat {0} >> {1}".format(fa, multifasta))

            qc_files = glob.glob(RESULT_DIR + "/*qc_results.csv")
            combined_csv = pd.concat([pd.read_csv(f) for f in qc_files])
            combined_csv.to_csv(
                output.temp_qc, index=False, header=True
            )
            cmd = "pango-collapse --output {0} --lineage-column lineage {1} > /dev/null".format(output.qc_file, output.temp_qc)
            os.system(cmd)
            with open(os.path.join(RESULT_DIR, "config.yaml"), "w") as outfile:
                yaml.dump(config, outfile, default_flow_style=False)


if config["workflow"] == "wastewater":

    include: "rules/wastewater.smk"

    rule final_qc:
        input:
            anno_files=expand(
                os.path.join(RESULT_DIR, "{sample}/variants/{sample}.annotated.tsv"),
                sample=MAIN_SAMPLES,
            ),
            coverage_plot=expand(
                os.path.join(
                    RESULT_DIR, "{sample}/coverage/{sample}.coverage_plots.pdf"
                ),
                sample=MAIN_SAMPLES,
            ),
            neg_reports=expand(
                os.path.join(RESULT_DIR, "{sample}.qc_results.csv"), sample=NEG_SAMPLES
            ),
            sample_reports=expand(
                os.path.join(RESULT_DIR, "{sample}.qc_results.csv"),
                sample=MAIN_SAMPLES,
            ),
            freyja_plot = os.path.join(RESULT_DIR, "freyja_aggregated","freyja_plot.pdf"),
            report=os.path.join(RESULT_DIR, TODAY + "_softwareVersions.txt"),
        params:
        output:
            qc_file=report(
                os.path.join(RESULT_DIR, TODAY + "_QC.csv"),
                caption="report/final_qc.rst",
                category="Final QC",
            ),
            temp_qc = temp(os.path.join(RESULT_DIR, TODAY + "_temp_QC.csv")),
        message:
            "Pipeline complete!"
        run:
            # aggregate fasta files
            fa_files = [f for f in glob.glob(RESULT_DIR + "/**/*.consensus.fa", recursive=True) if (s in f for s in MAIN_SAMPLES+NEG_SAMPLES)]

            multifasta = os.path.join(
                RESULT_DIR, TODAY + ".consensus_genomes.fasta"
            )
            if os.path.exists(multifasta):
                os.remove(multifasta)

            for fa in fa_files:
                os.system("cat {0} >> {1}".format(fa, multifasta))

            # concatenate QC files
            qc_files = glob.glob(RESULT_DIR + "/*qc_results.csv")
            combined_csv = pd.concat([pd.read_csv(f) for f in qc_files])
            combined_csv.to_csv(
                output.temp_qc, index=False, header=True
            )
            
            # run pango-collapse
            cmd = "pango-collapse --output {0} --lineage-column lineage {1} > /dev/null".format(output.qc_file, output.temp_qc)
            os.system(cmd)
            
            # write out config
            with open(os.path.join(RESULT_DIR, "config.yaml"), "w") as outfile:
                yaml.dump(config, outfile, default_flow_style=False)
